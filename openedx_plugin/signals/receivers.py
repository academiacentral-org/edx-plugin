"""
Written by:     McDaniel
Date:           June-2021

Usage:          Custom behaviors for mooc.academiacentral.org.
                Presently only used to prevent ID Verification workflows when students pay
                for courses, but could be used for other things.
"""
import logging
from django.dispatch import receiver
from django.contrib.auth.signals import user_logged_in
from django.utils.timezone import now
from datetime import timedelta


from common.djangoapps.student.signals import ENROLLMENT_TRACK_UPDATED
from common.djangoapps.course_modes.models import CourseMode

from lms.djangoapps.verify_student.models import ManualVerification
from lms.djangoapps.verify_student.utils import earliest_allowed_verification_date

AUDIT_LOG = logging.getLogger("audit")
STATUS_APPROVED = "approved"

@receiver(user_logged_in)
def set_id_verification_status(sender, request, user, **kwargs):  # pylint: disable=unused-argument
    """
    mcdaniel june-2021
    mooc.academiacentral.org does not require actual ID Verifications as part of upgrading stuents
    to paid 'Verified' course modes. We therefore add a manual ID verification record for any
    authenticated user. 

    This code is scaffolded from common.djangoapps.third_party_auth.pipeline.set_id_verification_status()
    """
    _set_manual_id_verification(user)

@receiver(ENROLLMENT_TRACK_UPDATED)
def check_id_verification_expiration_date(sender, user, course_key, mode, **kwargs):  # pylint: disable=unused-argument
    """
    When a CourseEnrollment's mode is changed to verified, check the ID Verification expiration date
    """
    if mode in CourseMode.VERIFIED_MODES:
        _set_manual_id_verification(user)

def _set_manual_id_verification(user):
    # Get previous valid, non expired verification attempts for this SSO Provider and user
    verifications = ManualVerification.objects.filter(
        user=user,
        status=STATUS_APPROVED,
        created_at__gte=earliest_allowed_verification_date()
    )

    # If there is none, create a new approved verification for the user.
    if not verifications:
        ManualVerification.objects.create(
            user=user,
            status=STATUS_APPROVED,
            name=user.profile.name,
            expiration_date=now() + timedelta(days=365),
            reason='auto-generated by common.djangoapps.academiacentral.signals.receivers.set_id_verification_status()'
        )

        AUDIT_LOG.info(u"ID Verification for user '{user_id}' approved by '{reviewer}' SSO.".format(
            user_id=user, reviewer="common.djangoapps.academiacentral.signals.receivers.set_id_verification_status()"
        ))
